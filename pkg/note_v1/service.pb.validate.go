// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package note_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddNoteV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddNoteV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNoteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNoteV1RequestMultiError, or nil if none found.
func (m *AddNoteV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNoteV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ClassroomId

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return AddNoteV1RequestMultiError(errors)
	}
	return nil
}

// AddNoteV1RequestMultiError is an error wrapping multiple validation errors
// returned by AddNoteV1Request.ValidateAll() if the designated constraints
// aren't met.
type AddNoteV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNoteV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNoteV1RequestMultiError) AllErrors() []error { return m }

// AddNoteV1RequestValidationError is the validation error returned by
// AddNoteV1Request.Validate if the designated constraints aren't met.
type AddNoteV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNoteV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNoteV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNoteV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNoteV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNoteV1RequestValidationError) ErrorName() string { return "AddNoteV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e AddNoteV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNoteV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNoteV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNoteV1RequestValidationError{}

// Validate checks the field values on AddNoteV1Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddNoteV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNoteV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNoteV1ResponseMultiError, or nil if none found.
func (m *AddNoteV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNoteV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NoteId

	if len(errors) > 0 {
		return AddNoteV1ResponseMultiError(errors)
	}
	return nil
}

// AddNoteV1ResponseMultiError is an error wrapping multiple validation errors
// returned by AddNoteV1Response.ValidateAll() if the designated constraints
// aren't met.
type AddNoteV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNoteV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNoteV1ResponseMultiError) AllErrors() []error { return m }

// AddNoteV1ResponseValidationError is the validation error returned by
// AddNoteV1Response.Validate if the designated constraints aren't met.
type AddNoteV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNoteV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNoteV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNoteV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNoteV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNoteV1ResponseValidationError) ErrorName() string {
	return "AddNoteV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddNoteV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNoteV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNoteV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNoteV1ResponseValidationError{}

// Validate checks the field values on RemoveNoteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveNoteV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveNoteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveNoteV1RequestMultiError, or nil if none found.
func (m *RemoveNoteV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveNoteV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveNoteV1RequestMultiError(errors)
	}
	return nil
}

// RemoveNoteV1RequestMultiError is an error wrapping multiple validation
// errors returned by RemoveNoteV1Request.ValidateAll() if the designated
// constraints aren't met.
type RemoveNoteV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveNoteV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveNoteV1RequestMultiError) AllErrors() []error { return m }

// RemoveNoteV1RequestValidationError is the validation error returned by
// RemoveNoteV1Request.Validate if the designated constraints aren't met.
type RemoveNoteV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveNoteV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveNoteV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveNoteV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveNoteV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveNoteV1RequestValidationError) ErrorName() string {
	return "RemoveNoteV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveNoteV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveNoteV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveNoteV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveNoteV1RequestValidationError{}

// Validate checks the field values on UpdateNoteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoteV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoteV1RequestMultiError, or nil if none found.
func (m *UpdateNoteV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoteV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ClassroomId

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return UpdateNoteV1RequestMultiError(errors)
	}
	return nil
}

// UpdateNoteV1RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNoteV1Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateNoteV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoteV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoteV1RequestMultiError) AllErrors() []error { return m }

// UpdateNoteV1RequestValidationError is the validation error returned by
// UpdateNoteV1Request.Validate if the designated constraints aren't met.
type UpdateNoteV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoteV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoteV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoteV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoteV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoteV1RequestValidationError) ErrorName() string {
	return "UpdateNoteV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoteV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoteV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoteV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoteV1RequestValidationError{}

// Validate checks the field values on DescribeNoteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeNoteV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeNoteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeNoteV1RequestMultiError, or nil if none found.
func (m *DescribeNoteV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeNoteV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DescribeNoteV1RequestMultiError(errors)
	}
	return nil
}

// DescribeNoteV1RequestMultiError is an error wrapping multiple validation
// errors returned by DescribeNoteV1Request.ValidateAll() if the designated
// constraints aren't met.
type DescribeNoteV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeNoteV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeNoteV1RequestMultiError) AllErrors() []error { return m }

// DescribeNoteV1RequestValidationError is the validation error returned by
// DescribeNoteV1Request.Validate if the designated constraints aren't met.
type DescribeNoteV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeNoteV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeNoteV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeNoteV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeNoteV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeNoteV1RequestValidationError) ErrorName() string {
	return "DescribeNoteV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeNoteV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeNoteV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeNoteV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeNoteV1RequestValidationError{}

// Validate checks the field values on DescribeNoteV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeNoteV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeNoteV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeNoteV1ResponseMultiError, or nil if none found.
func (m *DescribeNoteV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeNoteV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ClassroomId

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return DescribeNoteV1ResponseMultiError(errors)
	}
	return nil
}

// DescribeNoteV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeNoteV1Response.ValidateAll() if the designated
// constraints aren't met.
type DescribeNoteV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeNoteV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeNoteV1ResponseMultiError) AllErrors() []error { return m }

// DescribeNoteV1ResponseValidationError is the validation error returned by
// DescribeNoteV1Response.Validate if the designated constraints aren't met.
type DescribeNoteV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeNoteV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeNoteV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeNoteV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeNoteV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeNoteV1ResponseValidationError) ErrorName() string {
	return "DescribeNoteV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeNoteV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeNoteV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeNoteV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeNoteV1ResponseValidationError{}

// Validate checks the field values on Notes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NotesMultiError, or nil if none found.
func (m *Notes) ValidateAll() error {
	return m.validate(true)
}

func (m *Notes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ClassroomId

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return NotesMultiError(errors)
	}
	return nil
}

// NotesMultiError is an error wrapping multiple validation errors returned by
// Notes.ValidateAll() if the designated constraints aren't met.
type NotesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotesMultiError) AllErrors() []error { return m }

// NotesValidationError is the validation error returned by Notes.Validate if
// the designated constraints aren't met.
type NotesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotesValidationError) ErrorName() string { return "NotesValidationError" }

// Error satisfies the builtin error interface
func (e NotesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotesValidationError{}

// Validate checks the field values on MultiAddNotesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiAddNotesV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiAddNotesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiAddNotesV1RequestMultiError, or nil if none found.
func (m *MultiAddNotesV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiAddNotesV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiAddNotesV1RequestValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiAddNotesV1RequestValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiAddNotesV1RequestValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiAddNotesV1RequestMultiError(errors)
	}
	return nil
}

// MultiAddNotesV1RequestMultiError is an error wrapping multiple validation
// errors returned by MultiAddNotesV1Request.ValidateAll() if the designated
// constraints aren't met.
type MultiAddNotesV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiAddNotesV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiAddNotesV1RequestMultiError) AllErrors() []error { return m }

// MultiAddNotesV1RequestValidationError is the validation error returned by
// MultiAddNotesV1Request.Validate if the designated constraints aren't met.
type MultiAddNotesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiAddNotesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiAddNotesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiAddNotesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiAddNotesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiAddNotesV1RequestValidationError) ErrorName() string {
	return "MultiAddNotesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiAddNotesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiAddNotesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiAddNotesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiAddNotesV1RequestValidationError{}

// Validate checks the field values on MultiAddNotesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiAddNotesV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiAddNotesV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiAddNotesV1ResponseMultiError, or nil if none found.
func (m *MultiAddNotesV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiAddNotesV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MultiAddNotesV1ResponseMultiError(errors)
	}
	return nil
}

// MultiAddNotesV1ResponseMultiError is an error wrapping multiple validation
// errors returned by MultiAddNotesV1Response.ValidateAll() if the designated
// constraints aren't met.
type MultiAddNotesV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiAddNotesV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiAddNotesV1ResponseMultiError) AllErrors() []error { return m }

// MultiAddNotesV1ResponseValidationError is the validation error returned by
// MultiAddNotesV1Response.Validate if the designated constraints aren't met.
type MultiAddNotesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiAddNotesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiAddNotesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiAddNotesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiAddNotesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiAddNotesV1ResponseValidationError) ErrorName() string {
	return "MultiAddNotesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiAddNotesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiAddNotesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiAddNotesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiAddNotesV1ResponseValidationError{}

// Validate checks the field values on ListNotesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotesV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotesV1ResponseMultiError, or nil if none found.
func (m *ListNotesV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotesV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotesV1ResponseValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotesV1ResponseValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotesV1ResponseValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNotesV1ResponseMultiError(errors)
	}
	return nil
}

// ListNotesV1ResponseMultiError is an error wrapping multiple validation
// errors returned by ListNotesV1Response.ValidateAll() if the designated
// constraints aren't met.
type ListNotesV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotesV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotesV1ResponseMultiError) AllErrors() []error { return m }

// ListNotesV1ResponseValidationError is the validation error returned by
// ListNotesV1Response.Validate if the designated constraints aren't met.
type ListNotesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotesV1ResponseValidationError) ErrorName() string {
	return "ListNotesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotesV1ResponseValidationError{}
